/*
    KEY Concepts:
    -Understanding Modulus(%)
    -Using division for digit extraction
    -Recognizing divisibility, prime, numbers, GCD/LCM
    -Understanding integer overflow
    -Applying prefix sums, bitwise, and counting digits

    COMMON SCENARIOS:
    Modules tricks -> % 2 == 0(even), % 10 to extract last digit
    Digit extraction -> while(n) { int d = n % 10; n /= 10; }
    Palindrome Number -> check if number reads same backward
    Counting digits -> log10(n) + 1 or using a loop
    Bitwise ops -> Fast math for power of two, odd/even
    Prime Check -> Trial division up to sqrt(n)
    GCD/LCM -> __gcd(a,b) or Euclid's algorithm
    Power of X -> while(n % x == 0 ) to test if power of x 
    Reverse Integer -> Careful of 32-bit int overflow

    Functions:
    pow(a,b) -> raise to power
    sqrt(n) -> square root
    abs(n) -> absolute value
    log10(n) -> number of digits
    __gcd(a,b) -> greatest common divisor
    isalpha(char) / isdigit(char) -> in strings
    to_string(num) and stoi(str) for conversions
*/